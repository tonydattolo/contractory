import Head from 'next/head'
// import Image from 'next/image'
import { selectRefresh, setAccess, setUser, setLastRefresh } from 'slices/authSlice'
import { useSelector } from 'react-redux'
import { ListGroup, Spinner, Badge,  } from 'react-bootstrap'
import Link from 'next/dist/client/link'
import { useEffect } from 'react'
import router from 'next/router'
import { useGetUserQuery } from 'slices/authAPI'
import { useDispatch } from 'react-redux'
import Post from '@/components/Post'

import { useGetAllPostsQuery } from 'slices/postsAPI'

import { useRefreshTokenMutation } from 'slices/authAPI'

export default function Home() {

  const user = useSelector(state => state.auth.user)
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)
  const access_token = useSelector(state => state.auth.access)

  const refresh = useSelector(state => state.auth.refresh)
  const lastRefresh = useSelector(state => state.auth.lastRefresh)
  // calculate time since last token refresh in minutes
  const timeSinceRefresh = (new Date().getTime() - new Date(lastRefresh).getTime()) / (1000 * 60)

  const dispatch = useDispatch()

  const [
    refreshToken, {
      loading: refreshLoading,
      error: refreshError,
      isError: refreshIsError,
      isSuccess: refreshIsSuccess,
      data: refreshData,
    }
  ] = useRefreshTokenMutation()

  useEffect(() => {
    if (refresh && timeSinceRefresh >= 60 || lastRefresh === null || !access_token ) {
      handleRefreshJWT()
    }
  }, [])

  useEffect(() => {
    let access = undefined
    if (refreshData) {
      access = JSON.stringify(refreshData)
      // console.log(`access: ${access}`)
      dispatch(setAccess({ access }))
    }
  }, [refreshData])


  const handleRefreshJWT = async () => {
    try {
      await refreshToken({ refresh })
      dispatch(setLastRefresh(Date.now()))
      // dispatch(setAccess(JSON.stringify(refreshData)))
    } catch (error) {
      console.log(error)
    }
  }


  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h2>home page</h2>
      <br />
      {/* {postsIsLoading || postsIsFetching || postsData === undefined ? (
        <Spinner animation="border" variant="success" />
        ) : (
          <>
            <h3>All Posts</h3>
            {postsData.posts.map(post => (
              <Post key={post.id} post={post} />
            ))}
          </>
        )
      } */}
      
      <h4>How it Works</h4>
      {/* <ListGroup as="ol" numbered> */}
      <ListGroup as="ol">
        <ListGroup.Item
          as="li"
          className="d-flex justify-content-between align-items-start"
        >
          <div className="ms-2 me-auto">
            <div className="fw-bold">Connect to MetaMask</div>
            Download and install the MetaMask extension for your browser.
          </div>
        </ListGroup.Item>
        <ListGroup.Item
          as="li"
          className="d-flex justify-content-between align-items-start"
        >
          <div className="ms-2 me-auto">
            <div className="fw-bold">Select Wallet</div>
            Pick the account on MetaMask that you want to use for interacting with contracts.
          </div>
          <Badge variant="primary" pill>
            14
          </Badge>
        </ListGroup.Item>
        <ListGroup.Item
          as="li"
          className="d-flex justify-content-between align-items-start"
        >
          <div className="ms-2 me-auto">
            <div className="fw-bold">Verify Ownership of Account</div>
            Once you have connected the wallet to your SCaaS account, you will need to verify ownership of the account.
            We will generate a nonce to send you to sign, and you will sign a message containing the nonce.
            This allows us to verify that you are the owner of the account.
          </div>
          <Badge variant="primary" pill>
            14
          </Badge>
        </ListGroup.Item>
        <ListGroup.Item
          as="li"
          className="d-flex justify-content-between align-items-start"
        >
          <div className="ms-2 me-auto">
            <div className="fw-bold">Create a new Smart Contract</div>
            Create a new contract using the SCaaS interface.
            Add clauses, invite other addresses to participate.
          </div>
          <Badge variant="primary" pill>
            14
          </Badge>
        </ListGroup.Item>
        <ListGroup.Item
          as="li"
          className="d-flex justify-content-between align-items-start"
        >
          <div className="ms-2 me-auto">
            <div className="fw-bold">Launch Smart Contract to Mainnet</div>
            When you are satisifed with your clauses, and all parties have signed and agreed to terms,
            you can launch the contract to the mainnet.
            <br />
            A PDF copy will be emailed to all parties, and this PDF will be tied to the Smart Contract.
            This acts as a fallback legal document for the contract, that can be used in court, or arbitration.
          </div>
          <Badge variant="primary" pill>
            14
          </Badge>
        </ListGroup.Item>
      </ListGroup>
    </div>
  )
}
